pipeline {
    agent any

    environment {
        IMAGE_NAME = "my-go-app"
        HOME = "${WORKSPACE}"
        SONARQUBE_SERVER = "MySonarQube"
    }

    stages {
        
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Lint') {
            agent {
                 docker {
                    image 'golangci/golangci-lint:v1.63'
                    args '-v $PWD:/app -w /app'
                }
            }

            steps {
                 sh 'golangci-lint run ./... --out-format checkstyle  > lint-report.xml || true'
            }

            post {
                always {
                     recordIssues tools: [checkStyle(pattern: 'lint-report.xml')]
                }
            }


        }
        
        stage('Go Build & Test') {    
            agent {
            docker {
                image 'golang:1.23'
                args '-v $PWD:/app -w /app'
            }
            
            }

            environment {
                GOCACHE = '/tmp/go-cache'
            }
            steps {
                sh 'go version'
                sh 'go install github.com/jstemmer/go-junit-report@latest'

                sh 'go mod tidy'
                sh 'go build -o myapp'   // local build for testing only
                // sh 'go test -v ./... | go-junit-report > report.xml'
                sh 'go test -v -coverprofile=coverage.out -covermode=atomic ./... | tee test-report.out'
                sh 'go tool cover -html=coverage.out -o coverage.html'
            }
            post {
                always {
                    junit 'test-report.out'
                    //cobertura coberturaReportFile: 'coverage.xml', autoUpdateHealth: false, autoUpdateStability: false
                    //archiveArtifacts artifacts: 'coverage.out, coverage.html', fingerprint: true
                }
            }
        }



        // stage ('SonarQube Analysis') {
        //     steps {
        //         withSonarQubeEnv('MySonarQube') {
        //             sh 'sonar-scanner'
        //         }
        //     }
        // }

        // stage ('Quality Gate') {
        //     steps {
        //         timeout(time:1, unit: 'HOURS') {
        //             waitForQualityGate abortPipeline: true
        //         }
        //     }
        // }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv("${SONARQUBE_SERVER}") {
                script {
                    def scannerHome = tool 'SonarScanner'
                    sh """
                    "${scannerHome}/bin/sonar-scanner" 
                    """
                }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                waitForQualityGate abortPipeline: true
                }
            }
        }


        stage('Build Docker Image') {

            when {
                branch 'main'
            }
      
            steps {
                script {
                    // This Dockerfile does the real build (multi-stage)
                    docker.build("${IMAGE_NAME}:latest")
                }

                sh 'docker build -t ${IMAGE_NAME}:latest .'
            }
        }

        stage('Deploy Locally') {

            when {
                branch 'main'
            }

            steps {
                sh 'docker rm -f my-go-app || true'
                sh 'docker run -d -p 8500:8500 --name my-go-app my-go-app:latest'
            }
        }
    }
}
