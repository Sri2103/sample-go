pipeline {
    agent any

    environment {
        IMAGE_NAME = "my-go-app"
        HOME = "${WORKSPACE}"
        SONARQUBE_SERVER = "MySonarQube"
    }

    stages {
        
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    def fullGitSha = env.GIT_COMMIT
                    def shortGitSha = fullGitSha.substring(0,7)

                    echo "short git sha:${shortGitSha}"

                    env.SHORT_SHA = shortGitSha
                }
            }
        }


        stage('Lint') {
            agent {
                 docker {
                    image 'golangci/golangci-lint:v1.63'
                    args '-v $PWD:/app -w /app'
                }
            }

            steps {
                 sh 'golangci-lint run ./... --out-format checkstyle  > golangci-lint-report.xml || true'
            }

            post {
                always {
                     recordIssues tools: [checkStyle(pattern: 'golangci-lint-report.xml')]
                }
            }


        }
        
        stage('Go Build & Test') {    
            agent {
                docker {
                image 'golang:1.23'
                args '-v $PWD:/app -w /app'
                }

            }

            environment {
                GOCACHE = '/tmp/go-cache'
            }
            steps {
                sh 'go version'
                sh 'go install github.com/jstemmer/go-junit-report@latest'

                sh 'go mod tidy'
                sh 'go test -v -coverprofile=coverage.out ./... | go-junit-report > report.xml'
                sh 'go tool cover -html=coverage.out -o coverage.html'
            }
            post {
                always {
                    junit 'report.xml'
                   // cobertura coberturaReportFile: 'coverage.xml', autoUpdateHealth: false, autoUpdateStability: false
                    archiveArtifacts artifacts: 'coverage.out, coverage.html, report.xml', fingerprint: true
                }
            }
        }

   stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv("${SONARQUBE_SERVER}") {
                script {
                    def scannerHome = tool 'SonarScanner'
                    sh """
                    "${scannerHome}/bin/sonar-scanner" 
                    """
                }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                waitForQualityGate abortPipeline: false
                // waitForQualityGate abortPipeline: true
                }
            }
        }


        stage('Build Docker Image') {

            when {
                branch 'main'
            }
      
            steps {
                script {
                    // This Dockerfile does the real build (multi-stage)
                    docker.build("${IMAGE_NAME}:latest")
                    
                }

                // sh 'docker build -t ${IMAGE_NAME}:latest .'

                sh 'docker tag ${IMAGE_NAME}:latest http://localhost:5000/${IMAGE_NAME}:${env.SHORT_SHA}'

                sh 'docker push  http://localhost:5000/${IMAGE_NAME}:${env.SHORT_SHA}'

                script{

                    def sha = env.SHORT_SHA
                     sh 'docker rmi  http://localhost:5000/${IMAGE_NAME}:${sha}'
                }

               
            }
        }

        stage('Deploy Locally') {

            when {
                branch 'main'
            }

            steps {
                sh 'docker rm -f my-go-app || true'
                sh 'docker run -d -p 8500:8500 --name my-go-app my-go-app:latest'
            }
        }
    }
}
